(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{540:function(t,a,r){"use strict";r.r(a);var e=r(55),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"flux-redux-演变历程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#flux-redux-演变历程"}},[t._v("#")]),t._v(" Flux-Redux 演变历程")]),t._v(" "),r("h2",{attrs:{id:"解决的问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解决的问题"}},[t._v("#")]),t._v(" 解决的问题")]),t._v(" "),r("p",[t._v("如何更好地管理整个应用共享的数据，解决了组件层级过深时层层传递数据的尴尬局面")]),t._v(" "),r("h2",{attrs:{id:"flux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#flux"}},[t._v("#")]),t._v(" Flux")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://www.peterchen.club/imgs/flux.png",alt:"imgs"}})]),t._v(" "),r("h3",{attrs:{id:"优点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),r("p",[t._v("解决了 MVC 模式带来的数据流混乱问题,使用单项数据流")]),t._v(" "),r("h3",{attrs:{id:"缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),r("ul",[r("li",[t._v("多个 store 之间的依赖问题")]),t._v(" "),r("li",[t._v("难以进行服务器渲染（多个 store 状态不唯一）")]),t._v(" "),r("li",[t._v("store 混杂了逻辑和状态")])]),t._v(" "),r("h2",{attrs:{id:"redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),r("p",[t._v("Redux = Reducer + flux")]),t._v(" "),r("p",[t._v("在单项数据流的基础上强调三个原则")]),t._v(" "),r("ul",[r("li",[t._v("唯一数据源 （单一 store）")]),t._v(" "),r("li",[t._v("保持状态只读 （通过返回新对象改变状态）")]),t._v(" "),r("li",[t._v("数据改变只能通过纯函数完成 （state, action）=> {...state, [prop]: [preValue] + 1}")])])])}),[],!1,null,null,null);a.default=s.exports}}]);