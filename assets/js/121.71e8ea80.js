(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{550:function(e,t,a){"use strict";a.r(t);var r=a(55),v=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"vue-的声明周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-的声明周期"}},[e._v("#")]),e._v(" Vue 的声明周期")]),e._v(" "),a("h2",{attrs:{id:"创建前后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建前后"}},[e._v("#")]),e._v(" 创建前后")]),e._v(" "),a("h3",{attrs:{id:"beforecreate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beforecreate"}},[e._v("#")]),e._v(" beforeCreate")]),e._v(" "),a("p",[e._v("在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用")]),e._v(" "),a("h3",{attrs:{id:"created"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#created"}},[e._v("#")]),e._v(" created")]),e._v(" "),a("p",[e._v("在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见")]),e._v(" "),a("h2",{attrs:{id:"载入前后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#载入前后"}},[e._v("#")]),e._v(" 载入前后")]),e._v(" "),a("h3",{attrs:{id:"beforemount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beforemount"}},[e._v("#")]),e._v(" beforeMount")]),e._v(" "),a("p",[e._v("在挂载开始之前被调用：相关的 render 函数首次被调用。")]),e._v(" "),a("p",[e._v("该钩子在服务器端渲染期间不被调用")]),e._v(" "),a("h3",{attrs:{id:"mounted"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mounted"}},[e._v("#")]),e._v(" mounted")]),e._v(" "),a("p",[e._v("el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。")]),e._v(" "),a("p",[e._v("注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted")]),e._v(" "),a("h2",{attrs:{id:"更新前后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新前后"}},[e._v("#")]),e._v(" 更新前后")]),e._v(" "),a("h3",{attrs:{id:"beforeupdate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beforeupdate"}},[e._v("#")]),e._v(" beforeUpdate")]),e._v(" "),a("p",[e._v("数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。")]),e._v(" "),a("p",[e._v("该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行")]),e._v(" "),a("h3",{attrs:{id:"updated"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updated"}},[e._v("#")]),e._v(" updated")]),e._v(" "),a("p",[e._v("由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。")]),e._v(" "),a("p",[e._v("当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。")]),e._v(" "),a("p",[e._v("注意 updated 不会承诺所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以用 vm.$nextTick 替换掉 updated")]),e._v(" "),a("h2",{attrs:{id:"销毁前后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#销毁前后"}},[e._v("#")]),e._v(" 销毁前后")]),e._v(" "),a("h3",{attrs:{id:"beforedestory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beforedestory"}},[e._v("#")]),e._v(" beforeDestory")]),e._v(" "),a("p",[e._v("实例销毁之前调用。在这一步，实例仍然完全可用")]),e._v(" "),a("p",[e._v("该钩子在服务器端渲染期间不被调用")]),e._v(" "),a("h3",{attrs:{id:"destoryed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#destoryed"}},[e._v("#")]),e._v(" destoryed")]),e._v(" "),a("p",[e._v("Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁")]),e._v(" "),a("p",[e._v("该钩子在服务器端渲染期间不被调用")]),e._v(" "),a("h2",{attrs:{id:"keep-alive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive"}},[e._v("#")]),e._v(" keep-alive")]),e._v(" "),a("h3",{attrs:{id:"actived"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#actived"}},[e._v("#")]),e._v(" actived")]),e._v(" "),a("p",[e._v("keep-alive 组件激活时调用")]),e._v(" "),a("h3",{attrs:{id:"deactived"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deactived"}},[e._v("#")]),e._v(" deactived")]),e._v(" "),a("p",[e._v("keep-alive 组件停用时调用")])])}),[],!1,null,null,null);t.default=v.exports}}]);