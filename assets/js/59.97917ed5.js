(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{491:function(v,_,t){"use strict";t.r(_);var a=t(55),i=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"执行上下文栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文栈"}},[v._v("#")]),v._v(" 执行上下文栈")]),v._v(" "),t("h2",{attrs:{id:"可执行代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可执行代码"}},[v._v("#")]),v._v(" 可执行代码")]),v._v(" "),t("p",[v._v("JavaScript 可执行代码(executable code)的类型")]),v._v(" "),t("ul",[t("li",[v._v("全局代码")]),v._v(" "),t("li",[v._v("函数代码")]),v._v(" "),t("li",[v._v("eval 代码")])]),v._v(" "),t("p",[v._v("JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(executable context)\n对于每个执行上下文，都有三个重要属性：")]),v._v(" "),t("ul",[t("li",[v._v("变量对象(Variable object， VO)")]),v._v(" "),t("li",[v._v("作用域链(Scope chain)")]),v._v(" "),t("li",[v._v("this")])]),v._v(" "),t("p",[v._v("下面重点讲讲创建变量类型的过程。")]),v._v(" "),t("h2",{attrs:{id:"变量对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量对象"}},[v._v("#")]),v._v(" 变量对象")]),v._v(" "),t("p",[v._v("变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。因为不同执行上下文下的变量对象稍有不同，所以我们来聊聊全局上下文下的变量对象和函数上下文下的变量对象。")]),v._v(" "),t("h3",{attrs:{id:"全局上下文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局上下文"}},[v._v("#")]),v._v(" 全局上下文")]),v._v(" "),t("p",[v._v("什么叫全局对象：")]),v._v(" "),t("ul",[t("li",[v._v("全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。")]),v._v(" "),t("li",[v._v("在顶层 JavaScript 代码中，可以用关键字 this 引用全局对象。因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。")]),v._v(" "),t("li",[v._v("例如，当 JavaScript 代码引用 parseInt() 函数时，它引用的是全局对象的 parseInt 属性。全局对象是作用域链的头，还意味着在顶层 JavaScript 代码中声明的所有变量都将成为全局对象的属性。")])]),v._v(" "),t("h3",{attrs:{id:"函数上下文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数上下文"}},[v._v("#")]),v._v(" 函数上下文")]),v._v(" "),t("p",[v._v("在函数上下文中，用活动对象(activation object, AO)来表示变量对象。")]),v._v(" "),t("ul",[t("li",[v._v("活动对象和变量对象其实是一个东西,只是变量对象是规范上的或者说是引擎实现上的，活动对象不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫 activation object 呐，而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问。")]),v._v(" "),t("li",[v._v("活动对象是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象。")])]),v._v(" "),t("h2",{attrs:{id:"执行过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行过程"}},[v._v("#")]),v._v(" 执行过程")]),v._v(" "),t("p",[v._v("执行上下文的代码会分成两个阶段进行处理：分析和执行，我们也可以叫做：")]),v._v(" "),t("ol",[t("li",[v._v("进入执行上下文")]),v._v(" "),t("li",[v._v("代码执行")])]),v._v(" "),t("h3",{attrs:{id:"进入执行上下文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进入执行上下文"}},[v._v("#")]),v._v(" 进入执行上下文")]),v._v(" "),t("p",[v._v("一个执行上下文的生命周期可以分为两个阶段。")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("创建阶段:")]),v._v(" "),t("ul",[t("li",[v._v("在这个阶段中，执行上下文会分别创建变量对象，建立作用域链，以及确定 this 的指向。")]),v._v(" "),t("li",[v._v("js 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 undefined。")]),v._v(" "),t("li",[v._v("相同的函数会覆盖上一个函数，并且函数优先于变量提升")])])]),v._v(" "),t("li",[t("p",[v._v("代码执行阶段: 创建完成之后，就会开始执行代码，这个时候，会完成变量赋值，函数引用，以及执行其他代码。")])])]),v._v(" "),t("p",[v._v("当进入执行上下文时，这时候还没有执行代码，变量对象会包括：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("函数的所有形参 (如果是函数上下文)")]),v._v(" "),t("ul",[t("li",[v._v("由名称和对应值组成的一个变量对象的属性被创建")]),v._v(" "),t("li",[v._v("没有实参，属性值设为 undefined")])])]),v._v(" "),t("li",[t("p",[v._v("函数声明")]),v._v(" "),t("ul",[t("li",[v._v("由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建")]),v._v(" "),t("li",[v._v("如果变量对象已经存在相同名称的属性，则完全替换这个属性")])])]),v._v(" "),t("li",[t("p",[v._v("变量声明")]),v._v(" "),t("ul",[t("li",[v._v("由名称和对应值（undefined）组成一个变量对象的属性被创建")]),v._v(" "),t("li",[v._v("如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性")])])])]),v._v(" "),t("h3",{attrs:{id:"代码执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码执行"}},[v._v("#")]),v._v(" 代码执行")]),v._v(" "),t("p",[v._v("在代码执行阶段，会顺序执行代码，根据代码，修改变量对象的值")]),v._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("ul",[t("li",[v._v("全局上下文的变量对象初始化是全局对象")]),v._v(" "),t("li",[v._v("函数上下文的变量对象初始化只包括 Arguments 对象")]),v._v(" "),t("li",[v._v("在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值")]),v._v(" "),t("li",[v._v("在代码执行阶段，会再次修改变量对象的属性值")])])])}),[],!1,null,null,null);_.default=i.exports}}]);