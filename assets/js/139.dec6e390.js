(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{569:function(s,t,a){"use strict";a.r(t);var e=a(55),o=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器存储"}},[s._v("#")]),s._v(" 浏览器存储")]),s._v(" "),a("p",[s._v("在前端的数据展示和身份认证方面，不可避免的需要暂时或者持久的，保存一定量的数据在浏览器本地，避免将所有数据存入内存，过度占用系统资源")]),s._v(" "),a("p",[s._v("下面就来看看一共有几种方法可以进行浏览器存储")]),s._v(" "),a("h2",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[s._v("#")]),s._v(" cookie")]),s._v(" "),a("p",[s._v("cookie 与 session 属于传统的身份认证方式，也可在其中存储数据，今天来好好研究一下 cookie 与 token 在身份认证方面的差异，与 cookie 与 session 的异同")]),s._v(" "),a("h3",{attrs:{id:"身份认证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#身份认证"}},[s._v("#")]),s._v(" 身份认证")]),s._v(" "),a("p",[s._v("HTTP 是一种没有状态的协议，它并不知道是那个客户端在访问应用。所以在客户端发起对身份有要求的请求中，需要携带认证信息。")]),s._v(" "),a("h4",{attrs:{id:"cookie-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-2"}},[s._v("#")]),s._v(" cookie")]),s._v(" "),a("p",[s._v("cookie 可以在每次发送 HTTP 请求的时候传递给服务器端，所以可用 cookie 存储会话状态，在其中可以保存一些相关数据")]),s._v(" "),a("ul",[a("li",[s._v("可以保存用户喜好或者保存用户名密码")]),s._v(" "),a("li",[s._v("保存当前会话在服务器的唯一 ID(session ID)")])]),s._v(" "),a("p",[s._v("但是需要注意，为了不在传输 cookie 的过程中耗费太多网络资源，有最大"),a("code",[s._v("4KB")]),s._v("的大小限制")]),s._v(" "),a("blockquote",[a("p",[s._v("若被禁用，则可以使用 URL 重写、表单隐藏字段等方法，婉转实现")])]),s._v(" "),a("h4",{attrs:{id:"token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[s._v("#")]),s._v(" token")]),s._v(" "),a("p",[s._v("token 认证机制主要使用在 stateless 的 rest API 调用中，一般我们会在用户登录成功后,在本地保存服务器生成的 token，用作之后用户进行相关权限活动的证明，保证了登录状态的持续性")]),s._v(" "),a("p",[s._v("在安全性方面，为了防止 token 的盗用，可以将请求 URL、时间戳、token 三者进行合并加盐签名，在服务端校验有效即可")]),s._v(" "),a("h3",{attrs:{id:"cookie-与-session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-与-session"}},[s._v("#")]),s._v(" cookie 与 session")]),s._v(" "),a("p",[s._v("在这里，我们首先要了解清楚，"),a("code",[s._v("session的实现")]),s._v("和"),a("code",[s._v("session")]),s._v("的区别")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("session")]),s._v(" 是一个抽象概念，开发者为了实现中断和继续等操作，将 user agent 和 server 之间一对一的交互，抽象为“会话”，进而衍生出“会话状态”，也就是 session 的概念")]),s._v(" "),a("li",[s._v("而我们今天常说的 session，是为了绕开 cookie 的各种限制，通常借助 cookie 本身和后端存储实现的，一种更高级的会话状态"),a("strong",[s._v("实现")])])]),s._v(" "),a("p",[s._v("那我们这里主要讲的是 session 的实现中的，cookie 与 session 的异同")]),s._v(" "),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[s._v("#")]),s._v(" 特点")]),s._v(" "),a("ul",[a("li",[s._v("cookie 在客户端，session 在服务端")]),s._v(" "),a("li",[s._v("cookie 安全性较低，不可将机密数据不加密存在 cookie 中")]),s._v(" "),a("li",[s._v("session 访问量大时，会占用内存，影响性能")])]),s._v(" "),a("h2",{attrs:{id:"web-storage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web-storage"}},[s._v("#")]),s._v(" Web Storage")]),s._v(" "),a("p",[s._v("Web Storage API 提供机制， 使浏览器能以一种比使用 Cookie 更直观的方式存储键/值对")]),s._v(" "),a("h3",{attrs:{id:"localstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[s._v("#")]),s._v(" localStorage")]),s._v(" "),a("p",[s._v("是 HTML5 的本地存储，将数据保存在客户端中（一般是永久的)")]),s._v(" "),a("ul",[a("li",[s._v("添加键值对：localStorage.setItem(key,value)")]),s._v(" "),a("li",[s._v("获取键值：localStorage.getItem(key)")]),s._v(" "),a("li",[s._v("删除键值对：localStorage.removeItem(key)。")]),s._v(" "),a("li",[s._v("清除所有键值对：localStorage.clear()。")]),s._v(" "),a("li",[s._v("获取 localStorage 的属性名称（键名称）：localStorage.key(index)。")])]),s._v(" "),a("h4",{attrs:{id:"taobao-的妙用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taobao-的妙用"}},[s._v("#")]),s._v(" Taobao 的妙用")]),s._v(" "),a("p",[s._v("第一次访问后，使用 localStorage 存储 base64 处理后的图片地址，节约二次请求时消耗的服务器资源")]),s._v(" "),a("h3",{attrs:{id:"sessionstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage"}},[s._v("#")]),s._v(" sessionStorage")]),s._v(" "),a("p",[s._v("它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，而存储在 sessionStorage 里面的数据在页面会话结束时会被清除")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存数据到sessionStorage")]),s._v("\nsessionStorage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'key'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'value'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从sessionStorage获取数据")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sessionStorage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'key'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从sessionStorage删除保存的数据")]),s._v("\nsessionStorage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'key'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从sessionStorage删除所有保存的数据")]),s._v("\nsessionStorage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"indexdb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexdb"}},[s._v("#")]),s._v(" IndexDB")]),s._v(" "),a("p",[s._v("IndexedDB 是一个用于在浏览器中储存较大数据结构的 Web API, 并提供索引功能以实现高性能查找. 像其他基于 SQL 的 关系型数据库管理系统 (RDBMS) 一样, IndexedDB 是一个事务型的数据库系统. 然而, 它是使用 JavaScript 对象而非列数固定的表格来储存数据的")]),s._v(" "),a("p",[s._v("用得比较少，之后如果用到会回来补充的")]),s._v(" "),a("h2",{attrs:{id:"cookie-sessionstorage-和-localstorage-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-sessionstorage-和-localstorage-的区别"}},[s._v("#")]),s._v(" cookie sessionStorage 和 localStorage 的区别")]),s._v(" "),a("h3",{attrs:{id:"用法不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用法不同"}},[s._v("#")]),s._v(" 用法不同")]),s._v(" "),a("ul",[a("li",[s._v("cookie:\n"),a("ul",[a("li",[s._v("cookie 是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。")]),s._v(" "),a("li",[s._v("cookie 数据始终在同源的 http 请求中携带（即使不需要），记会在浏览器和服务器间来回传递。")])])]),s._v(" "),a("li",[s._v("sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存")])]),s._v(" "),a("h3",{attrs:{id:"存储大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储大小"}},[s._v("#")]),s._v(" 存储大小")]),s._v(" "),a("ul",[a("li",[s._v("cookie 数据大小不能超过 4k")]),s._v(" "),a("li",[s._v("sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大")])]),s._v(" "),a("h3",{attrs:{id:"有效时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有效时间"}},[s._v("#")]),s._v(" 有效时间")]),s._v(" "),a("ul",[a("li",[s._v("localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据")]),s._v(" "),a("li",[s._v("sessionStorage 数据在当前浏览器窗口关闭后自动删除")]),s._v(" "),a("li",[s._v("cookie 设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭")])]),s._v(" "),a("h3",{attrs:{id:"作用域不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域不同"}},[s._v("#")]),s._v(" 作用域不同")]),s._v(" "),a("ul",[a("li",[s._v("sessionStorage 不在不同的浏览器窗口中共享，即使是同一个页面")]),s._v(" "),a("li",[s._v("localStorage 在所有同源窗口中都是共享的")]),s._v(" "),a("li",[s._v("cookie 也是在所有同源窗口中都是共享的")])]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("前端方面常见的存储方式就这么多，才疏学浅，欢迎读者提出建议")])])}),[],!1,null,null,null);t.default=o.exports}}]);