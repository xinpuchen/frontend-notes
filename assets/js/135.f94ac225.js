(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{564:function(t,n,a){"use strict";a.r(n);var e=a(55),o=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"精准时间获取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精准时间获取"}},[t._v("#")]),t._v(" 精准时间获取")]),t._v(" "),a("h2",{attrs:{id:"window-performance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-performance"}},[t._v("#")]),t._v(" window.performance")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("memory: 代表 JavaScript 对内存的占用")])]),t._v(" "),a("li",[a("p",[t._v("navigation：统计的是一些网页导航相关的数据")]),t._v(" "),a("ul",[a("li",[t._v("redirectCount:重定向的数量（只读），但是这个接口有同源策略限制，即仅能检测同源的重定向")]),t._v(" "),a("li",[t._v("type 返回值应该是 0,1,2 中的一个。分别对应三个枚举值:\n0 : TYPE_NAVIGATE (用户通过常规导航方式访问页面，比如点一个链接，或者一般的 get 方式)\n1 : TYPE_RELOAD (用户通过刷新，包括 JS 调用刷新接口等方式访问页面)\n2 : TYPE_BACK_FORWARD (用户通过后退按钮访问本页面)")])])]),t._v(" "),a("li",[a("p",[t._v("timing:")]),t._v(" "),a("ul",[a("li",[t._v("startTime：有些浏览器实现为 navigationStart，代表浏览器开始 unload 前一个页面文档的开始时间节点。比如我们当前正在浏览 baidu.com，在地址栏输入 google.com 并回车，浏览器的执行动作依次为：unload 当前文档（即 baidu.com）->请求下一文档（即 google.com）。navigationStart 的值便是触发 unload 当前文档的时间节点。如果当前文档为空，则 navigationStart 的值等于 fetchStart。")]),t._v(" "),a("li",[t._v("redirectStart 和 redirectEnd：如果页面是由 redirect 而来，则 redirectStart 和 redirectEnd 分别代表 redirect 开始和结束的时间节点；")]),t._v(" "),a("li",[t._v("unloadEventStart 和 unloadEventEnd：如果前一个文档和请求的文档是同一个域的，则 unloadEventStart 和 unloadEventEnd 分别代表浏览器 unload 前一个文档的开始和结束时间节点。否则两者都等于 0；")]),t._v(" "),a("li",[t._v("fetchStart 是指在浏览器发起任何请求之前的时间值。在 fetchStart 和 domainLookupStart 之间，浏览器会检查当前文档的缓存；")]),t._v(" "),a("li",[t._v("domainLookupStart 和 domainLookupEnd 分别代表 DNS 查询的开始和结束时间节点。如果浏览器没有进行 DNS 查询（比如使用了 cache），则两者的值都等于 fetchStart；")]),t._v(" "),a("li",[t._v("connectStart 和 connectEnd 分别代表 TCP 建立连接和连接成功的时间节点。如果浏览器没有进行 TCP 连接（比如使用持久化连接 webscoket），则两者都等于 domainLookupEnd；")]),t._v(" "),a("li",[t._v("secureConnectionStart：可选。如果页面使用 HTTPS，它的值是安全连接握手之前的时刻。如果该属性不可用，则返回 undefined。如果该属性可用，但没有使用 HTTPS，则返回 0；")]),t._v(" "),a("li",[t._v("requestStart 代表浏览器发起请求的时间节点，请求的方式可以是请求服务器、缓存、本地资源等；")]),t._v(" "),a("li",[t._v("responseStart 和 responseEnd 分别代表浏览器收到从服务器端（或缓存、本地资源）响应回的第一个字节和最后一个字节数据的时刻；")]),t._v(" "),a("li",[t._v("domLoading 代表浏览器开始解析 html 文档的时间节点。我们知道 IE 浏览器下的 document 有 readyState 属性，domLoading 的值就等于 readyState 改变为 loading 的时间节点；")]),t._v(" "),a("li",[t._v("domInteractive 代表浏览器解析 html 文档的状态为 interactive 时的时间节点。domInteractive 并非 DOMReady，它早于 DOMReady 触发，代表 html 文档解析完毕（即 dom tree 创建完成）但是内嵌资源（比如外链 css、js 等）还未加载的时间点；")]),t._v(" "),a("li",[t._v("domContentLoadedEventStart：代表 DOMContentLoaded 事件触发的时间节点：\n页面文档完全加载并解析完毕之后,会触发 DOMContentLoaded 事件，HTML 文档不会等待样式文件,图片文件,子框架页面的加载(load 事件可以用来检测 HTML 页面是否完全加载完毕(fully-loaded))。")]),t._v(" "),a("li",[t._v("domContentLoadedEventEnd：代表 DOMContentLoaded 事件完成的时间节点，此刻用户可以对页面进行操作，也就是 jQuery 中的 domready 时间；")]),t._v(" "),a("li",[t._v("domComplete：html 文档完全解析完毕的时间节点；")]),t._v(" "),a("li",[t._v("loadEventStart 和 loadEventEnd 分别代表 onload 事件触发和结束的时间节点")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("提示：")])]),t._v(" "),a("blockquote",[a("p",[t._v("浏览器使用 performance.now() 可以获取 performance.timing.navigationStart 到当前时间的微秒数")])]),t._v(" "),a("blockquote",[a("p",[t._v("performance.timing.navigationStart + performance.now() 约等于 Date.now()")])]),t._v(" "),a("h2",{attrs:{id:"相关时间计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关时间计算"}},[t._v("#")]),t._v(" 相关时间计算")]),t._v(" "),a("ul",[a("li",[t._v("DNS 查询耗时 = domainLookupEnd - domainLookupStart")]),t._v(" "),a("li",[t._v("TCP 链接耗时 = connectEnd - connectStart")]),t._v(" "),a("li",[t._v("request 请求耗时 = responseEnd - requestStart")]),t._v(" "),a("li",[t._v("解析 dom 树耗时 = domComplete - domInteractive")]),t._v(" "),a("li",[t._v("白屏时间 = domloading - fetchStart")]),t._v(" "),a("li",[t._v("domready 可操作时间 = domContentLoadedEventEnd - fetchStart")]),t._v(" "),a("li",[t._v("onload 总下载时间 = loadEventEnd - fetchStart")])]),t._v(" "),a("h2",{attrs:{id:"静态资源的时间计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态资源的时间计算"}},[t._v("#")]),t._v(" 静态资源的时间计算")]),t._v(" "),a("p",[t._v("performance.getEntries()，用来统计静态资源相关的时间信息返回一个数组，数组的每个元素代表对应的静态资源的信息")]),t._v(" "),a("h2",{attrs:{id:"node-环境运行时间计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-环境运行时间计算"}},[t._v("#")]),t._v(" Node 环境运行时间计算")]),t._v(" "),a("p",[t._v("node 环境使用 process.hrtime() 方法返回当前时间以 [seconds, nanoseconds] 元数组表示的高精度解析值，其中 nanoseconds 是当前时间无法使用秒的精度表示的剩余部分")]),t._v(" "),a("blockquote",[a("p",[t._v("time 是可选参数，传入的值是上一次调用 process.hrtime() 返回的结果，用于与当次调用做差值计算")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hrtime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [444199, 614056016]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hrtime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [(3, 16256093)];")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);n.default=o.exports}}]);