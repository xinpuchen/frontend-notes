(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{473:function(t,s,a){"use strict";a.r(s);var n=a(55),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-原型链"}},[t._v("#")]),t._v(" JS 原型链")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image-static.segmentfault.com/e4/65/e46508fbcd140db304232aba89f41c83_articlex",alt:"imgs"}})]),t._v(" "),a("h2",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),a("p",[t._v("JS 只有一种结构，对象。每个对象都有一个私有属性"),a("strong",[t._v("proto")]),t._v("，它指向它的原型对象的 prototype。该 prototype 对象又具有一个自己的"),a("strong",[t._v("proto")]),t._v(" ，层层向上直到一个对象的原型为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。")]),t._v(" "),a("h3",{attrs:{id:"要点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#要点"}},[t._v("#")]),t._v(" 要点")]),t._v(" "),a("ul",[a("li",[t._v("当 new 一个函数的时候会创建一个对象，『被创建对象."),a("strong",[t._v("proto")]),t._v("』 等于 『函数.prototype』")]),t._v(" "),a("li",[t._v("一切函数都是由 Function 这个函数创建的，所以『被创建的函数."),a("strong",[t._v("proto")]),t._v("』 === 『Function.prototype』")]),t._v(" "),a("li",[t._v("一切函数的原型对象都是由 Object 这个函数创建的，所以『一切函数.prototype."),a("strong",[t._v("proto")]),t._v("』 === 『Object.prototype』")])]),t._v(" "),a("h3",{attrs:{id:"原型链顶端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链顶端"}},[t._v("#")]),t._v(" 原型链顶端")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Function.prototype")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object.prototype")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n")])])]),a("h3",{attrs:{id:"举例：object-实例如何拥有-tostring-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例：object-实例如何拥有-tostring-方法"}},[t._v("#")]),t._v(" 举例：object 实例如何拥有 toString 方法")]),t._v(" "),a("ol",[a("li",[t._v("obj 对象内为空，没有定义 toString 方法")]),t._v(" "),a("li",[t._v("obj 含有私有属性"),a("strong",[t._v("proto")]),t._v(",在其中发现了 obj."),a("strong",[t._v("proto")]),t._v(".toString 方法")]),t._v(" "),a("li",[t._v("实际上调用的是 window.Object.prototype.toString")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h3",{attrs:{id:"举例：array-实例如何拥有-push-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例：array-实例如何拥有-push-方法"}},[t._v("#")]),t._v(" 举例：Array 实例如何拥有 push 方法")]),t._v(" "),a("ul",[a("li",[t._v("实例化数组，数组 a 本身没有 push 方法")]),t._v(" "),a("li",[t._v("沿着原型链向上查找")]),t._v(" "),a("li",[t._v("在实例化时继承 Array 原型，获取 Array 原型方法 push")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// array prototype")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("Object 是所有对象的爸爸，所有对象都可以通过 "),a("strong",[t._v("proto")]),t._v(" 找到它")]),t._v(" "),a("li",[t._v("Function 是所有函数的爸爸，所有函数都可以通过 "),a("strong",[t._v("proto")]),t._v(" 找到它")]),t._v(" "),a("li",[t._v("Function.prototype 和 Object.prototype 是两个特殊的对象，他们由引擎来创建")]),t._v(" "),a("li",[t._v("除了以上两个特殊对象，其他对象都是通过构造器 new 出来的")]),t._v(" "),a("li",[t._v("函数的 prototype 是一个对象，也就是原型")]),t._v(" "),a("li",[t._v("对象的 "),a("strong",[t._v("proto")]),t._v(" 指向原型， "),a("strong",[t._v("proto")]),t._v(" 将对象和原型连接起来组成了原型链")]),t._v(" "),a("li",[t._v("一切对象都继承自 Object.prototype，而一切函数对象都继承自 Function.prototype(且 Function.prototype 会最终继承自 Object.prototype)，也就是说普通对象和函数对象的区别是：普通对象直接继承了 Object.prototype，而函数对象在中间还继承了 Function.prototype")]),t._v(" "),a("li",[t._v("Function 的原型链为 Function→ Function.prototype → Object.prototype → null ，Object 的原型链为 Object → Function.prototype → Object.prototype → null，不会出现死循环。说是互相继承，是因为根据原型链，Function 能使用到 Object 的原型方法，而 Object 也能使用到 Function 的原型方法。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);