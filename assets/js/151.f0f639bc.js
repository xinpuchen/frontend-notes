(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{580:function(t,v,_){"use strict";_.r(v);var a=_(55),e=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"tcp-拥塞控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-拥塞控制"}},[t._v("#")]),t._v(" TCP 拥塞控制")]),t._v(" "),_("p",[t._v("拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。")]),t._v(" "),_("p",[t._v("拥塞处理包括了四个算法，分别为：")]),t._v(" "),_("ul",[_("li",[t._v("慢开始")]),t._v(" "),_("li",[t._v("拥塞避免")]),t._v(" "),_("li",[t._v("快速重传")]),t._v(" "),_("li",[t._v("快速恢复。")])]),t._v(" "),_("h2",{attrs:{id:"慢开始算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#慢开始算法"}},[t._v("#")]),t._v(" 慢开始算法")]),t._v(" "),_("p",[t._v("慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。\n慢开始算法步骤具体如下")]),t._v(" "),_("ul",[_("li",[t._v("连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）")]),t._v(" "),_("li",[t._v("每过一个 RTT 就将窗口大小乘二")]),t._v(" "),_("li",[t._v("指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。")])]),t._v(" "),_("h2",{attrs:{id:"拥塞避免算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#拥塞避免算法"}},[t._v("#")]),t._v(" 拥塞避免算法")]),t._v(" "),_("p",[t._v("拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。\n在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：")]),t._v(" "),_("ul",[_("li",[t._v("将阈值设为当前拥塞窗口的一半")]),t._v(" "),_("li",[t._v("将拥塞窗口设为 1 MSS")]),t._v(" "),_("li",[t._v("启动拥塞避免算法")])]),t._v(" "),_("h2",{attrs:{id:"快速重传"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快速重传"}},[t._v("#")]),t._v(" 快速重传")]),t._v(" "),_("p",[t._v("快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下）。如果收到三个重复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种：")]),t._v(" "),_("h3",{attrs:{id:"tcp-taho-实现如下"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-taho-实现如下"}},[t._v("#")]),t._v(" TCP Taho 实现如下")]),t._v(" "),_("ul",[_("li",[t._v("将阈值设为当前拥塞窗口的一半")]),t._v(" "),_("li",[t._v("将拥塞窗口设为 1 MSS")]),t._v(" "),_("li",[t._v("重新开始慢开始算法")])]),t._v(" "),_("h3",{attrs:{id:"tcp-reno-实现如下"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-reno-实现如下"}},[t._v("#")]),t._v(" TCP Reno 实现如下")]),t._v(" "),_("ul",[_("li",[t._v("拥塞窗口减半")]),t._v(" "),_("li",[t._v("将阈值设为当前拥塞窗口")]),t._v(" "),_("li",[t._v("进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段）")]),t._v(" "),_("li",[t._v("使用拥塞避免算法")])]),t._v(" "),_("h2",{attrs:{id:"tcp-new-ren-改进后的快恢复"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-new-ren-改进后的快恢复"}},[t._v("#")]),t._v(" TCP New Ren 改进后的快恢复")]),t._v(" "),_("ul",[_("li",[t._v("TCP New Reno 算法改进了之前 TCP Reno 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。")]),t._v(" "),_("li",[t._v("在 TCP New Reno 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。")])]),t._v(" "),_("blockquote",[_("p",[t._v("假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，接收方顺利接收并会发送 ACK 序号为 7 的应答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。")])])])}),[],!1,null,null,null);v.default=e.exports}}]);