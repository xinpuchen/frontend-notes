(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{484:function(t,a,s){"use strict";s.r(a);var n=s(55),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"内存泄漏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[t._v("#")]),t._v(" 内存泄漏")]),t._v(" "),s("h2",{attrs:{id:"什么是内存泄漏？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是内存泄漏？"}},[t._v("#")]),t._v(" 什么是内存泄漏？")]),t._v(" "),s("p",[t._v("当我们决定不再使用某些内存时，由于错误的编码，未能使得 GC(Gabbage Collection)正确的将这些内存回收的情况，就是内存泄漏。")]),t._v(" "),s("h2",{attrs:{id:"内存的占用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存的占用"}},[t._v("#")]),t._v(" 内存的占用")]),t._v(" "),s("p",[s("strong",[t._v("一个对象占用的内存分为直接占用内存(Shallow Size)和占用总内存(Retained Size)，赋值和 New 操作都会涉及到内存的占用。")])]),t._v(" "),s("ul",[s("li",[t._v("直接占用内存：对象本身占用的内存。典型的 JavaScript 对象都会有保留内存用来描述这个对象和存储它的直接值。一般，只有数组和字符串会有明显的直接占用内存(Shallow Size)。但字符串和数组常常会在渲染器内存中存储主要数据部分，仅仅在 JavaScript 对象栈中暴露一个很小的包装对象。")]),t._v(" "),s("li",[t._v("占用总内存：直接占用内存和这个引用的依赖对象所占用的内存。")])]),t._v(" "),s("h2",{attrs:{id:"内存的分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存的分配"}},[t._v("#")]),t._v(" 内存的分配")]),t._v(" "),s("p",[t._v("Chrome V8 的垃圾回收（GC）算法基于 Generational Collection，内存被划分为两种，分别称为 Young Generation（YG）和 Old Generation（OG）。")]),t._v(" "),s("blockquote",[s("p",[t._v("所谓 Young 和 Old 是根据他们占用的时间来划分的。内存在 YG 的分配和回收快而频繁，一般存在的时间很短，所以称为 Young；而在 OG 中则慢而少发生，所以称为 Old。")])]),t._v(" "),s("p",[t._v("因为在 V8 中，YG 的 GC 过程会阻塞程序，而 OG 的 GC 不会阻塞。所以通常情况下开发者更关心 YG 的细节。")]),t._v(" "),s("p",[t._v("YG 又被平分为两部分空间，分别称为 From 和 To。所有内存从 To 空间被分配出去，当 To 满时，开始触发 GC。")]),t._v(" "),s("h2",{attrs:{id:"内存的回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存的回收"}},[t._v("#")]),t._v(" 内存的回收")]),t._v(" "),s("p",[t._v("GC Root 是内存的根结节，在浏览器中它是 window，在 NodeJS 中则是 global 对象。\n从 GC Root 开始遍历图，所有能到达的节点称为活节点，如果存在 GC Root 不能到达的节点，那么该节点称为“垃圾”，将会被回收，如图中灰色的节点。\n至于根节点的回收，不受用户的控制。")]),t._v(" "),s("h2",{attrs:{id:"js-垃圾回收机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-垃圾回收机制"}},[t._v("#")]),t._v(" JS 垃圾回收机制")]),t._v(" "),s("p",[s("strong",[t._v("标记清除")]),t._v(" 和 "),s("strong",[t._v("引用计数")])]),t._v(" "),s("h3",{attrs:{id:"标记清除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标记清除"}},[t._v("#")]),t._v(" 标记清除")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//被标记，进入环境")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//被标记，进入环境")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行完毕之后a、b又被标记离开环境，被回收")]),t._v("\n")])])]),s("h3",{attrs:{id:"引用计数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a的引用次数为0")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a的引用次数加1，为1")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a的引用次数加1，为2")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a的引用次数减1，为1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"会引发内存泄漏的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#会引发内存泄漏的情况"}},[t._v("#")]),t._v(" 会引发内存泄漏的情况")]),t._v(" "),s("h3",{attrs:{id:"没有完全切断与-gc-root-之间的路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#没有完全切断与-gc-root-之间的路径"}},[t._v("#")]),t._v(" 没有完全切断与 GC root 之间的路径")]),t._v(" "),s("ul",[s("li",[t._v("对象之间的相互引用")]),t._v(" "),s("li",[t._v("错误使用了全局变量")]),t._v(" "),s("li",[t._v("DOM 元素清空或删除时，绑定的事件未清除")]),t._v(" "),s("li",[t._v("闭包引用")]),t._v(" "),s("li",[t._v("被遗忘的定时器或者回调")]),t._v(" "),s("li",[t._v("DOM 元素清空或删除时，子元素存在 JS 引用，导致子元素的所有父元素都不会被删除")])]),t._v(" "),s("h3",{attrs:{id:"过度占用了内存空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过度占用了内存空间"}},[t._v("#")]),t._v(" 过度占用了内存空间")]),t._v(" "),s("ul",[s("li",[t._v("无节制的循环")]),t._v(" "),s("li",[t._v("过大的数组")])])])}),[],!1,null,null,null);a.default=r.exports}}]);